#include <cmath>
#include <iostream>
#include "./weights.hpp"

using namespace std;

const int width = 28;
const int height = 28;

const int n1 = width * height;  // = 784, without bias neuron
const int n2 = 128;
const int n3 = 10;  // Ten classes: 0 - 9

double *in2, *out1, *out2, *in3, *out3;

// 5 in (0,255)
int testImg[28][28] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0,  0,  0,   0,   0,   0,  0,   0,   0,   0,   0, 0, 3, 18,
     18, 18, 126, 136, 175, 26, 166, 255, 247, 127, 0, 0, 0, 0},
    {0,   0,   0,   0,   0,   0,   0,   0,   30,  36, 94, 154, 170, 253,
     253, 253, 253, 253, 225, 172, 253, 242, 195, 64, 0,  0,   0,   0},
    {0,   0,   0,   0,   0,  0,  0,  49, 238, 253, 253, 253, 253, 253,
     253, 253, 253, 251, 93, 82, 82, 56, 39,  0,   0,   0,   0,   0},
    {0,   0,   0,   0,   0, 0, 0, 18, 219, 253, 253, 253, 253, 253,
     198, 182, 247, 241, 0, 0, 0, 0,  0,   0,   0,   0,   0,   0},
    {0,  0, 0,  0,   0, 0, 0, 0, 80, 156, 107, 253, 253, 205,
     11, 0, 43, 154, 0, 0, 0, 0, 0,  0,   0,   0,   0,   0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 1, 154, 253, 90,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,   0,   0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 253, 190,
     2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0},
    {0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 190, 253,
     70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,   0},
    {0,   0,   0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 241,
     225, 160, 108, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0},
    {0,   0,   0,   0,   0,  0, 0, 0, 0, 0, 0, 0, 0, 81,
     240, 253, 253, 119, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0,  0,   0,   0,   0,   0,  0, 0, 0, 0, 0, 0, 0, 0,
     45, 186, 253, 253, 150, 27, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0,  0,  0,   0,   0,   0, 0, 0, 0, 0, 0, 0, 0,
     0, 16, 93, 252, 253, 187, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0,   0,   0,   0,  0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 249, 253, 249, 64, 0, 0, 0, 0, 0, 0, 0},
    {0,  0,   0,   0,   0,   0,   0, 0, 0, 0, 0, 0, 0, 0,
     46, 130, 183, 253, 253, 207, 2, 0, 0, 0, 0, 0, 0, 0},
    {0,   0,   0,   0,   0,   0,   0, 0, 0, 0, 0, 0, 39, 148,
     229, 253, 253, 253, 250, 182, 0, 0, 0, 0, 0, 0, 0,  0},
    {0,   0,   0,   0,   0,  0, 0, 0, 0, 0, 24, 114, 221, 253,
     253, 253, 253, 201, 78, 0, 0, 0, 0, 0, 0,  0,   0,   0},
    {0,   0,   0,  0, 0, 0, 0, 0, 23, 66, 213, 253, 253, 253,
     253, 198, 81, 2, 0, 0, 0, 0, 0,  0,  0,   0,   0,   0},
    {0,  0, 0, 0, 0, 0, 18, 171, 219, 253, 253, 253, 253, 195,
     80, 9, 0, 0, 0, 0, 0,  0,   0,   0,   0,   0,   0,   0},
    {0, 0, 0, 0, 55, 172, 226, 253, 253, 253, 253, 244, 133, 11,
     0, 0, 0, 0, 0,  0,   0,   0,   0,   0,   0,   0,   0,   0},
    {0, 0, 0, 0, 136, 253, 253, 253, 212, 135, 132, 16, 0, 0,
     0, 0, 0, 0, 0,   0,   0,   0,   0,   0,   0,   0,  0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

void init_array() {
  out1 = new double[n1];
  in2 = new double[n2];
  out2 = new double[n2];
  in3 = new double[n3];
  out3 = new double[n3];
}


double sigmoid(double x) { return 1.0 / (1.0 + exp(-x)); }

void perceptron() {
  for (int i = 0; i < n2; ++i) {
    in2[i] = 0.0;
  }

  for (int i = 0; i < n3; ++i) {
    in3[i] = 0.0;
  }

  for (int i = 0; i < n1; ++i) {
    for (int j = 0; j < n2; ++j) {
      in2[j] += out1[i] * w1_[i][j];
    }
  }

  for (int i = 0; i < n2; ++i) {
    out2[i] = sigmoid(in2[i]);
  }

  for (int i = 0; i < n2; ++i) {
    for (int j = 0; j < n3; ++j) {
      in3[j] += out2[i] * w2_[i][j];
    }
  }

  for (int i = 0; i < n3; ++i) {
    out3[i] = sigmoid(in3[i]);
  }
}

void input() {
  for (int j = 0; j < height; ++j) {
    for (int i = 0; i < width; ++i) {
      int pos = i + j * height;
      out1[pos] = testImg[j][i] == 0 ? 0 : 1;
    }
  }
}

int main(int argc, char *argv[]) {
  init_array();
  input();
  perceptron();
  cout << "prediction: " << distance(out3, max_element(out3, out3 + n3))
       << endl;
  return 0;
}
